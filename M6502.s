#ifdef __arm__

#include "M6502mac.h"

	.syntax unified
	.arm

#ifdef NDS
//	.section .itcm						;@ For the NDS ARM9
	.section .text						;@ For the NDS
#elif GBA
	.section .iwram, "ax", %progbits	;@ For the GBA
#else
	.section .text
#endif
	.align 2

	.global m6502Reset
	.global m6502SetNMIPin
	.global m6502SetIRQPin
	.global m6502RestoreAndRunXCycles
	.global m6502RunXCycles
	.global m6502CheckIrqs
	.global m6502SaveState
	.global m6502LoadState
	.global m6502GetStateSize
	.global outOfCycles

	.global m6502OpTable


;@----------------------------------------------------------------------------
_00:	;@ BRK				Error?
;@----------------------------------------------------------------------------
	sub m6502pc,m6502pc,#1
	reEncodePC
	ldrb r0,[m6502pc]
	cmp r0,#0					;@ Real BRK?
	beq doBRK
m6502Go:
	fetch 0
;@----------------------------------------------------------------------------
_01:	;@ ORA ($nn,X)
;@----------------------------------------------------------------------------
	readMemIIX
	opORA 6
;@----------------------------------------------------------------------------
_02:   ;@ KIL (JAM) [HLT] STP
_12:
_22:
_32:
_42:
_52:
_62:
_72:
_92:
_B2:
_D2:
_F2:
;@----------------------------------------------------------------------------
	opKIL
;@----------------------------------------------------------------------------
_03:	;@ SLO ($nn,X)			;ShiftLeft ORA
;@----------------------------------------------------------------------------
	doIIX
	opSLO 8
;@----------------------------------------------------------------------------
_05:	;@ ORA $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opORA 3
;@----------------------------------------------------------------------------
_06:	;@ ASL $nn
;@----------------------------------------------------------------------------
	doZ
	opASL 5
;@----------------------------------------------------------------------------
_07:	;@ SLO $nn
;@----------------------------------------------------------------------------
	doZ
	opSLO 5
;@----------------------------------------------------------------------------
_08:	;@ PHP
;@----------------------------------------------------------------------------
	encodeP (B)
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
_09:	;@ ORA #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opORA 2
;@----------------------------------------------------------------------------
_0A:	;@ ASL
;@----------------------------------------------------------------------------
	adds m6502a,m6502a,m6502a
	orr cycles,cycles,#CYC_C	;@ Prepare C
	getNextOpcode
	mov m6502nz,m6502a,asr#24	;@ NZ
	executeOpCode_c 2			;@ Also subs carry
;@----------------------------------------------------------------------------
_0D:	;@ ORA $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opORA 4
;@----------------------------------------------------------------------------
_0E:	;@ ASL $nnnn
;@----------------------------------------------------------------------------
	doABS
	opASL 6
;@----------------------------------------------------------------------------
_0F:	;@ SLO $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSLO 6
;@----------------------------------------------------------------------------
_10:	;@ BPL *
;@----------------------------------------------------------------------------
	opBPL
;@----------------------------------------------------------------------------
_11:	;@ ORA ($nn),Y
;@----------------------------------------------------------------------------
	readMemIIY
	opORA 5
;@----------------------------------------------------------------------------
_13:	;@ SLO ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSLO 8
;@----------------------------------------------------------------------------
_15:	;@ ORA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readMem
	opORA 4
;@----------------------------------------------------------------------------
_16:	;@ ASL $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opASL 6
;@----------------------------------------------------------------------------
_17:	;@ SLO $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSLO 6
;@----------------------------------------------------------------------------
_18:	;@ CLC
;@----------------------------------------------------------------------------
	getNextOpcode
	bic cycles,cycles,#CYC_C
	executeOpcode 2
;@----------------------------------------------------------------------------
_19:	;@ ORA $nnnn,Y
;@----------------------------------------------------------------------------
	readMemAIY
	opORA 4
;@----------------------------------------------------------------------------
_1B:	;@ SLO $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSLO 7
;@----------------------------------------------------------------------------
_1D:	;@ ORA $nnnn,X
;@----------------------------------------------------------------------------
	readMemAIX
	opORA 4
;@----------------------------------------------------------------------------
_1E:	;@ ASL $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opASL 7
;@----------------------------------------------------------------------------
_1F:	;@ SLO $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSLO 7
;@----------------------------------------------------------------------------
_20:	;@ JSR $nnnn
;@----------------------------------------------------------------------------
	loadLastBank r0
	ldrb r1,[m6502pc],#1
	ldrb r2,[m6502pc]
	sub r0,m6502pc,r0
	orr m6502pc,r1,r2,lsl#8
	push16
	encodePC
	fetch 6
;@----------------------------------------------------------------------------
_21:	;@ AND ($nn,X)
;@----------------------------------------------------------------------------
	readMemIIX
	opAND 6
;@----------------------------------------------------------------------------
_23:	;@ RLA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opRLA 8
;@----------------------------------------------------------------------------
_24:	;@ BIT $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opBIT 3
;@----------------------------------------------------------------------------
_25:	;@ AND $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opAND 3
;@----------------------------------------------------------------------------
_26:	;@ ROL $nn
;@----------------------------------------------------------------------------
	doZ
	opROL 5
;@----------------------------------------------------------------------------
_27:	;@ RLA $nn
;@----------------------------------------------------------------------------
	doZ
	opRLA 5
;@----------------------------------------------------------------------------
_28:	;@ PLP
;@----------------------------------------------------------------------------
	pop8 r0
	decodePF
;@	eatCycles 4
;@	b m6502CheckIrqs			;@ Fixes?
	fetch 4
;@----------------------------------------------------------------------------
_29:	;@ AND #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opAND 2
;@----------------------------------------------------------------------------
_2A:	;@ ROL
;@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1	;@ Get C
	orrcs m6502a,m6502a,#0x00800000
	adds m6502a,m6502a,m6502a
	adc cycles,cycles,cycles	;@ Set C
	getNextOpcode
	mov m6502nz,m6502a,asr#24	;@ NZ
	executeOpcode 2
;@----------------------------------------------------------------------------
_0B:	;@ ANC #$nn
_2B:	;@ ANC #$nn
;@----------------------------------------------------------------------------
	readMemIMM
	bic cycles,cycles,#CYC_C
	and m6502a,m6502a,r0,lsl#24
	movs m6502nz,m6502a,asr#24	;@NZ
	orrmi cycles,cycles,#CYC_C
	fetch 2
;@----------------------------------------------------------------------------
_2C:	;@ BIT $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opBIT 4
;@----------------------------------------------------------------------------
_2D:	;@ AND $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opAND 4
;@----------------------------------------------------------------------------
_2E:	;@ ROL $nnnn
;@----------------------------------------------------------------------------
	doABS
	opROL 6
;@----------------------------------------------------------------------------
_2F:	;@ RLA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opRLA 6
;@----------------------------------------------------------------------------
_30:	;@ BMI
;@----------------------------------------------------------------------------
	opBMI
;@----------------------------------------------------------------------------
_31:	;@ AND ($nn),Y
;@----------------------------------------------------------------------------
	readMemIIY
	opAND 5
;@----------------------------------------------------------------------------
_33:	;@ RLA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opRLA 8
;@----------------------------------------------------------------------------
_35:	;@ AND $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readMem
	opAND 4
;@----------------------------------------------------------------------------
_36:	;@ ROL $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opROL 6
;@----------------------------------------------------------------------------
_37:	;@ RLA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opRLA 6
;@----------------------------------------------------------------------------
_38:	;@ SEC
;@----------------------------------------------------------------------------
	getNextOpcode
	orr cycles,cycles,#CYC_C
	executeOpcode 2
;@----------------------------------------------------------------------------
_39:	;@ AND $nnnn,Y
;@----------------------------------------------------------------------------
	readMemAIY
	opAND 4
;@----------------------------------------------------------------------------
_3B:	;@ RLA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opRLA 7
;@----------------------------------------------------------------------------
_3D:	;@ AND $nnnn,X
;@----------------------------------------------------------------------------
	readMemAIX
	opAND 4
;@----------------------------------------------------------------------------
_3E:	;@ ROL $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opROL 7
;@----------------------------------------------------------------------------
_3F:	;@ RLA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opRLA 7
;@----------------------------------------------------------------------------
_40:	;@ RTI
;@----------------------------------------------------------------------------
	pop8 r0						;@ Pop m6502 flags and decode
	decodePF
	pop16						;@ Pop the return address
	encodePC
	eatCycles 6
	b m6502CheckIrqs			;@ Fixes?
;@	fetch 6
;@----------------------------------------------------------------------------
_41:	;@ EOR ($nn,X)
;@----------------------------------------------------------------------------
	readMemIIX
	opEOR 6
;@----------------------------------------------------------------------------
_43:	;@ SRE ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSRE 8
;@----------------------------------------------------------------------------
_45:	;@ EOR $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opEOR 3
;@----------------------------------------------------------------------------
_46:	;@ LSR $nn
;@----------------------------------------------------------------------------
	doZ
	opLSR 5
;@----------------------------------------------------------------------------
_47:	;@ SRE $nn
;@----------------------------------------------------------------------------
	doZ
	opSRE 5
;@----------------------------------------------------------------------------
_48:	;@ PHA
;@----------------------------------------------------------------------------
	mov r0,m6502a,lsr#24
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
_49:	;@ EOR #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opEOR 2
;@----------------------------------------------------------------------------
_4A:	;@ LSR
;@----------------------------------------------------------------------------
	movs m6502nz,m6502a,lsr#25		;@ Z, N never set.
	orr cycles,cycles,#CYC_C		;@ Prepare C
	getNextOpcode
	mov m6502a,m6502nz,lsl#24		;@ Result without garbage
	executeOpcode_c 2
;@----------------------------------------------------------------------------
_4B:	;@ ALR #$nn
;@----------------------------------------------------------------------------
	ldrb r0,[m6502pc],#1
	and m6502a,m6502a,r0,lsl#24
	movs m6502nz,m6502a,lsr#25		;@ Z, N never set.
	orr cycles,cycles,#CYC_C		;@ Prepare C
	getNextOpcode
	mov m6502a,m6502nz,lsl#24		;@ Result without garbage
	executeOpcode_c 2
;@----------------------------------------------------------------------------
_4C:	;@ JMP $nnnn
;@----------------------------------------------------------------------------
	ldrb r0,[m6502pc]
	ldrb m6502pc,[m6502pc,#1]
	add r2,m6502optbl,#m6502MemTbl
	and r1,m6502pc,#0xE0
//	encodePC
	ldr r1,[r2,r1,lsr#3]		;@ In: m6502pc.
	orr m6502pc,r0,m6502pc,lsl#8
	add m6502pc,m6502pc,r1
	getNextOpcode
	storeLastBank r1
	executeOpcode 3
;@----------------------------------------------------------------------------
_4D:	;@ EOR $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opEOR 4
;@----------------------------------------------------------------------------
_4E:	;@ LSR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLSR 6
;@----------------------------------------------------------------------------
_4F:	;@ SRE $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSRE 6
;@----------------------------------------------------------------------------
_50:	;@ BVC *
;@----------------------------------------------------------------------------
	opBVC
;@----------------------------------------------------------------------------
_51:	;@ EOR ($nn),Y
;@----------------------------------------------------------------------------
	readMemIIY
	opEOR 5
;@----------------------------------------------------------------------------
_53:	;@ SRE ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSRE 8
;@----------------------------------------------------------------------------
_55:	;@ EOR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readMem
	opEOR 4
;@----------------------------------------------------------------------------
_56:	;@ LSR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opLSR 6
;@----------------------------------------------------------------------------
_57:	;@ SRE $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSRE 6
;@----------------------------------------------------------------------------
_58:	;@ CLI
;@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I
;@	eatCycles 2
;@	b m6502CheckIrqs			;@ Fixes?

	ldr r0,=cliFix				;@ Check IRQ lines after next instructions
	str r0,[m6502optbl,#m6502NextTimeout]
	eatCycles 2
	str cycles,[m6502optbl,#m6502OldCycles]	;@ Save old cycles so we can use them later on.
	clearCycles					;@ Clear cycles, save cpu bits

	fetch 0
	.pool
;@----------------------------------------------------------------------------
_59:	;@ EOR $nnnn,Y
;@----------------------------------------------------------------------------
	readMemAIY
	opEOR 4
;@----------------------------------------------------------------------------
_5B:	;@ SRE $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSRE 7
;@----------------------------------------------------------------------------
_5D:	;@ EOR $nnnn,X
;@----------------------------------------------------------------------------
	readMemAIX
	opEOR 4
;@----------------------------------------------------------------------------
_5E:	;@ LSR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLSR 7
;@----------------------------------------------------------------------------
_5F:	;@ SRE $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSRE 7
;@----------------------------------------------------------------------------
_60:	;@ RTS
;@----------------------------------------------------------------------------
	pop16
	add m6502pc,m6502pc,#1
	encodePC
	fetch 6
;@----------------------------------------------------------------------------
_61:	;@ ADC ($nn,X)
;@----------------------------------------------------------------------------
	readMemIIX
	opADC 6
;@----------------------------------------------------------------------------
_63:	;@ RRA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opRRA 8
;@----------------------------------------------------------------------------
_65:	;@ ADC $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opADC 3
;@----------------------------------------------------------------------------
_66:	;@ ROR $nn
;@----------------------------------------------------------------------------
	doZ
	opROR 5
;@----------------------------------------------------------------------------
_67:	;@ RRA $nn
;@----------------------------------------------------------------------------
	doZ
	opRRA 5
;@----------------------------------------------------------------------------
_68:	;@ PLA
;@----------------------------------------------------------------------------
	pop8 m6502nz
	getNextOpcode
	mov m6502a,m6502nz,lsl#24
	executeOpcode 4
;@----------------------------------------------------------------------------
_69:	;@ ADC #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opADC 2
;@----------------------------------------------------------------------------
_6A:	;@ ROR
;@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1	;@ Get C
	mov m6502a,m6502a,rrx
	movs m6502nz,m6502a,asr#24	;@ NZ
	and m6502a,m6502a,#0xff000000
	getNextOpcode
	adc cycles,cycles,cycles	;@ Set C
	executeOpcode 2
;@----------------------------------------------------------------------------
_6B:	;@ ARR #$nn
;@----------------------------------------------------------------------------
	doIMM
	opARR 2
;@----------------------------------------------------------------------------
_6C:	;@ JMP ($nnnn)
;@----------------------------------------------------------------------------
	readMemABS
	mov m6502pc,r0
	add addy,addy,#1
	readMem8
	orr m6502pc,m6502pc,r0,lsl#8
	encodePC
	fetch 5
;@----------------------------------------------------------------------------
_6D:	;@ ADC $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opADC 4
;@----------------------------------------------------------------------------
_6E:	;@ ROR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opROR 6
;@----------------------------------------------------------------------------
_6F:	;@ RRA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opRRA 6
;@----------------------------------------------------------------------------
_70:	;@ BVS *
;@----------------------------------------------------------------------------
	opBVS
;@----------------------------------------------------------------------------
_71:	;@ ADC ($nn),Y
;@----------------------------------------------------------------------------
	readMemIIY
	opADC 5
;@----------------------------------------------------------------------------
_73:	;@ RRA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opRRA 8
;@----------------------------------------------------------------------------
_75:	;@ ADC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readMem
	opADC 4
;@----------------------------------------------------------------------------
_76:	;@ ROR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opROR 6
;@----------------------------------------------------------------------------
_77:	;@ RRA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opRRA 6
;@----------------------------------------------------------------------------
_78:	;@ SEI
;@----------------------------------------------------------------------------
	getNextOpcode
	orr cycles,cycles,#CYC_I
	executeOpcode 2
;@----------------------------------------------------------------------------
_79:	;@ ADC $nnnn,Y
;@----------------------------------------------------------------------------
	readMemAIY
	opADC 4
;@----------------------------------------------------------------------------
_7B:	;@ RRA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opRRA 7
;@----------------------------------------------------------------------------
_7D:	;@ ADC $nnnn,X
;@----------------------------------------------------------------------------
	readMemAIX
	opADC 4
;@----------------------------------------------------------------------------
_7E:	;@ ROR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opROR 7
;@----------------------------------------------------------------------------
_7F:	;@ RRA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opRRA 7
;@----------------------------------------------------------------------------
_81:	;@ STA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSTORE m6502a 6
;@----------------------------------------------------------------------------
_83:	;@ SAX ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSAX 6
;@----------------------------------------------------------------------------
_84:	;@ STY $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE m6502y 3
;@----------------------------------------------------------------------------
_85:	;@ STA $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE m6502a 3
;@----------------------------------------------------------------------------
_86:	;@ STX $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE m6502x 3
;@----------------------------------------------------------------------------
_87:	;@ SAX $nn
;@----------------------------------------------------------------------------
	doZ
	opSAX 3
;@----------------------------------------------------------------------------
_88:	;@ DEY
;@----------------------------------------------------------------------------
	sub m6502y,m6502y,#0x01000000
	getNextOpcode
	mov m6502nz,m6502y,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_8A:	;@ TXA
;@----------------------------------------------------------------------------
	mov m6502a,m6502x
	getNextOpcode
	mov m6502nz,m6502x,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_8B:	;@ ANE #$nn
;@----------------------------------------------------------------------------
	readMemIMM
	orr m6502a,m6502a,#0xEE000000
	and m6502a,m6502a,m6502x
	and m6502a,m6502a,r0,lsl#24
	getNextOpcode
	mov m6502nz,m6502a,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_8C:	;@ STY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE m6502y 4
;@----------------------------------------------------------------------------
_8D:	;@ STA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE m6502a 4
;@----------------------------------------------------------------------------
_8E:	;@ STX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE m6502x 4
;@----------------------------------------------------------------------------
_8F:	;@ SAX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSAX 4
;@----------------------------------------------------------------------------
_90:	;@ BCC *
;@----------------------------------------------------------------------------
	opBCC
;@----------------------------------------------------------------------------
_91:	;@ STA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSTORE m6502a 6
;@----------------------------------------------------------------------------
_93:	;@ SHA ($nn),Y
;@----------------------------------------------------------------------------
	opSHA_IND_Y 6
;@----------------------------------------------------------------------------
_94:	;@ STY $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502y 4
;@----------------------------------------------------------------------------
_95:	;@ STA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502a 4
;@----------------------------------------------------------------------------
_96:	;@ STX $nn,Y
;@----------------------------------------------------------------------------
	doZIYf
	opSTORE m6502x 4
;@----------------------------------------------------------------------------
_97:	;@ SAX $nn,Y
;@----------------------------------------------------------------------------
	doZIYf
	opSAX 4
;@----------------------------------------------------------------------------
_98:	;@ TYA
;@----------------------------------------------------------------------------
	mov m6502a,m6502y
	getNextOpcode
	mov m6502nz,m6502y,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_99:	;@ STA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSTORE m6502a 5
;@----------------------------------------------------------------------------
_9A:	;@ TXS
;@----------------------------------------------------------------------------
	getNextOpcode
	orr m6502sp,m6502x,#0x00000001
	executeOpcode 2
;@----------------------------------------------------------------------------
_9B:	;@ SHS $nnnn,Y
;@----------------------------------------------------------------------------
	opSHS_ABS_Y 5
;@----------------------------------------------------------------------------
_9C:	;@ SHY $nnnn,X
;@----------------------------------------------------------------------------
	opSHY_ABS_X 5
;@----------------------------------------------------------------------------
_9D:	;@ STA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSTORE m6502a 5
;@----------------------------------------------------------------------------
_9E:	;@	SHX $nnnn,Y
;@----------------------------------------------------------------------------
	opSHX_ABS_Y 5
;@----------------------------------------------------------------------------
_9F:	;@ SHA $nnnn,Y
;@----------------------------------------------------------------------------
	opSHA_ABS_Y 5
;@----------------------------------------------------------------------------
_A0:	;@ LDY #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502y 2
;@----------------------------------------------------------------------------
_A1:	;@ LDA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opLOAD m6502a 6
;@----------------------------------------------------------------------------
_A2:	;@ LDX #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502x 2
;@----------------------------------------------------------------------------
_A3:	;@ LAX ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opLAX 6
;@----------------------------------------------------------------------------
_A4:	;@ LDY $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD m6502y 3
;@----------------------------------------------------------------------------
_A5:	;@ LDA $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD m6502a 3
;@----------------------------------------------------------------------------
_A6:	;@ LDX $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD m6502x 3
;@----------------------------------------------------------------------------
_A7:	;@ LAX $nn
;@----------------------------------------------------------------------------
	doZ
	opLAX 3
;@----------------------------------------------------------------------------
_A8:	;@ TAY
;@----------------------------------------------------------------------------
	mov m6502y,m6502a
	getNextOpcode
	mov m6502nz,m6502a,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_A9:	;@ LDA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502a 2
;@----------------------------------------------------------------------------
_AA:	;@ TAX
;@----------------------------------------------------------------------------
	mov m6502x,m6502a
	getNextOpcode
	mov m6502nz,m6502a,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_AB:	;@ LXA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLXA 2
;@----------------------------------------------------------------------------
_AC:	;@ LDY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD m6502y 4
;@----------------------------------------------------------------------------
_AD:	;@ LDA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD m6502a 4
;@----------------------------------------------------------------------------
_AE:	;@ LDX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD m6502x 4
;@----------------------------------------------------------------------------
_AF:	;@ LAX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLAX 4
;@----------------------------------------------------------------------------
_B0:	;@ BCS *
;@----------------------------------------------------------------------------
	opBCS
;@----------------------------------------------------------------------------
_B1:	;@ LDA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opLOAD m6502a 5
;@----------------------------------------------------------------------------
_B3:	;@ LAX ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opLAX 5
;@----------------------------------------------------------------------------
_B4:	;@ LDY $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opLOAD m6502y 4
;@----------------------------------------------------------------------------
_B5:	;@ LDA $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opLOAD m6502a 4
;@----------------------------------------------------------------------------
_B6:	;@ LDX $nn,Y
;@----------------------------------------------------------------------------
	doZIY
	opLOAD m6502x 4
;@----------------------------------------------------------------------------
_B7:	;@ LAX $nn,Y
;@----------------------------------------------------------------------------
	doZIY
	opLAX 4
;@----------------------------------------------------------------------------
_B8:	;@ CLV
;@----------------------------------------------------------------------------
	getNextOpcode
	bic cycles,cycles,#CYC_V
	executeOpcode 2
;@----------------------------------------------------------------------------
_B9:	;@ LDA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLOAD m6502a 4
;@----------------------------------------------------------------------------
_BA:	;@ TSX
;@----------------------------------------------------------------------------
	and m6502x,m6502sp,#0xFF000000
	getNextOpcode
	mov m6502nz,m6502sp,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_BB:	;@ LAS $nnnn,Y
;@----------------------------------------------------------------------------
	readMemAIY
	opLAS 4
;@----------------------------------------------------------------------------
_BC:	;@ LDY $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLOAD m6502y 4
;@----------------------------------------------------------------------------
_BD:	;@ LDA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLOAD m6502a 4
;@----------------------------------------------------------------------------
_BE:	;@ LDX $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLOAD m6502x 4
;@----------------------------------------------------------------------------
_BF:	;@ LAX $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLAX 4
;@----------------------------------------------------------------------------
_C0:	;@ CPY #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opCOMP m6502y 2
;@----------------------------------------------------------------------------
_C1:	;@ CMP ($nn,X)
;@----------------------------------------------------------------------------
	readMemIIX
	opCOMP m6502a 6
;@----------------------------------------------------------------------------
_C3:	;@ DCP ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opDCP 8
;@----------------------------------------------------------------------------
_C4:	;@ CPY $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opCOMP m6502y 3
;@----------------------------------------------------------------------------
_C5:	;@ CMP $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opCOMP m6502a 3
;@----------------------------------------------------------------------------
_C6:	;@ DEC $nn
;@----------------------------------------------------------------------------
	doZ
	opDEC 5
;@----------------------------------------------------------------------------
_C7:	;@ DCP $nn
;@----------------------------------------------------------------------------
	doZ
	opDCP 5
;@----------------------------------------------------------------------------
_C8:	;@ INY
;@----------------------------------------------------------------------------
	add m6502y,m6502y,#0x01000000
	getNextOpcode
	mov m6502nz,m6502y,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_C9:	;@ CMP #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opCOMP m6502a 2
;@----------------------------------------------------------------------------
_CA:	;@ DEX
;@----------------------------------------------------------------------------
	sub m6502x,m6502x,#0x01000000
	getNextOpcode
	mov m6502nz,m6502x,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_CB:	;@ SBX #$nn
;@----------------------------------------------------------------------------
	doIMM
	opSBX 2
;@----------------------------------------------------------------------------
_CC:	;@ CPY $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opCOMP m6502y 4
;@----------------------------------------------------------------------------
_CD:	;@ CMP $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opCOMP m6502a 4
;@----------------------------------------------------------------------------
_CE:	;@ DEC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opDEC 6
;@----------------------------------------------------------------------------
_CF:	;@ DCP $nnnn
;@----------------------------------------------------------------------------
	doABS
	opDCP 6
;@----------------------------------------------------------------------------
_D0:	;@ BNE *
;@----------------------------------------------------------------------------
	opBNE
;@----------------------------------------------------------------------------
_D1:	;@ CMP ($nn),Y
;@----------------------------------------------------------------------------
	readMemIIY
	opCOMP m6502a 5
;@----------------------------------------------------------------------------
_D3:	;@ DCP ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opDCP 8
;@----------------------------------------------------------------------------
_D5:	;@ CMP $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readMem
	opCOMP m6502a 4
;@----------------------------------------------------------------------------
_D6:	;@ DEC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opDEC 6
;@----------------------------------------------------------------------------
_D7:	;@ DCP $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opDCP 6
;@----------------------------------------------------------------------------
_D8:	;@ CLD
;@----------------------------------------------------------------------------
	getNextOpcode
	bic cycles,cycles,#CYC_D
	executeOpcode 2
;@----------------------------------------------------------------------------
_D9:	;@ CMP $nnnn,Y
;@----------------------------------------------------------------------------
	readMemAIY
	opCOMP m6502a 4
;@----------------------------------------------------------------------------
_DB:	;@ DCP $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opDCP 7
;@----------------------------------------------------------------------------
_DD:	;@ CMP $nnnn,X
;@----------------------------------------------------------------------------
	readMemAIX
	opCOMP m6502a 4
;@----------------------------------------------------------------------------
_DE:	;@ DEC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opDEC 7
;@----------------------------------------------------------------------------
_DF:	;@ DCP $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opDCP 7
;@----------------------------------------------------------------------------
_E0:	;@ CPX #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opCOMP m6502x 2
;@----------------------------------------------------------------------------
_E1:	;@ SBC ($nn,X)
;@----------------------------------------------------------------------------
	readMemIIX
	opSBC 6
;@----------------------------------------------------------------------------
_E3:	;@ ISB ($nn),X
;@----------------------------------------------------------------------------
	doIIX
	opISB 8
;@----------------------------------------------------------------------------
_E4:	;@ CPX $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opCOMP m6502x 3
;@----------------------------------------------------------------------------
_E5:	;@ SBC $nn
;@----------------------------------------------------------------------------
	doZ
	readMem
	opSBC 3
;@----------------------------------------------------------------------------
_E6:	;@ INC $nn
;@----------------------------------------------------------------------------
	doZ
	opINC 5
;@----------------------------------------------------------------------------
_E7:	;@ ISB $nn
;@----------------------------------------------------------------------------
	doZ
	opISB 5
;@----------------------------------------------------------------------------
_E8:	;@ INX
;@----------------------------------------------------------------------------
	add m6502x,m6502x,#0x01000000
	getNextOpcode
	mov m6502nz,m6502x,asr#24
	executeOpcode 2
;@----------------------------------------------------------------------------
_E9:	;@ SBC #$nn
;@----------------------------------------------------------------------------
_EB:	;@ SBC #$nn
;@----------------------------------------------------------------------------
	doIMM
	readMem
	opSBC 2
;@----------------------------------------------------------------------------
_0C:
_1C:
_3C:
_5C:
_7C:
_DC:
_FC:	;@ SKW
;@----------------------------------------------------------------------------
	add m6502pc,m6502pc,#1
;@----------------------------------------------------------------------------
_14:
_34:
_54:
_74:
_D4:
_F4:	;@ SKB 4 cycles
;@----------------------------------------------------------------------------
	eatCycles 1
;@----------------------------------------------------------------------------
_04:
_44:
_64:	;@ SKB 3 cycles
;@----------------------------------------------------------------------------
	eatCycles 1
;@----------------------------------------------------------------------------
_80:
_82:
_89:
_C2:
_E2:	;@ SKB 2 cycles
;@----------------------------------------------------------------------------
	add m6502pc,m6502pc,#1
;@----------------------------------------------------------------------------
_1A:
_3A:
_5A:
_7A:
_DA:
_EA:	;@ NOP
_FA:
;@----------------------------------------------------------------------------
	fetch 2
;@----------------------------------------------------------------------------
_EC:	;@ CPX $nnnn
;@----------------------------------------------------------------------------
	readMemABS
	opCOMP m6502x 4
;@----------------------------------------------------------------------------
_ED:	;@ SBC $nnnn
;@----------------------------------------------------------------------------
	doABS
	readMem
	opSBC 4
;@----------------------------------------------------------------------------
_EE:	;@ INC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opINC 6
;@----------------------------------------------------------------------------
_EF:	;@ ISB $nnnn
;@----------------------------------------------------------------------------
	doABS
	opISB 6
;@----------------------------------------------------------------------------
_F0:	;@ BEQ *
;@----------------------------------------------------------------------------
	opBEQ
;@----------------------------------------------------------------------------
_F1:	;@ SBC ($nn),Y
;@----------------------------------------------------------------------------
	readMemIIY
	opSBC 5
;@----------------------------------------------------------------------------
_F3:	;@ ISB ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opISB 8
;@----------------------------------------------------------------------------
_F5:	;@ SBC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readMem
	opSBC 4
;@----------------------------------------------------------------------------
_F6:	;@ INC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opINC 6
;@----------------------------------------------------------------------------
_F7:	;@ ISB $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opISB 6
;@----------------------------------------------------------------------------
_F8:	;@ SED
;@----------------------------------------------------------------------------
	getNextOpcode
	orr cycles,cycles,#CYC_D
	executeOpcode 2
;@----------------------------------------------------------------------------
_F9:	;@ SBC $nnnn,Y
;@----------------------------------------------------------------------------
	readMemAIY
	opSBC 4
;@----------------------------------------------------------------------------
_FB:	;@ ISB $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opISB 7
;@----------------------------------------------------------------------------
_FD:	;@ SBC $nnnn,X
;@----------------------------------------------------------------------------
	readMemAIX
	opSBC 4
;@----------------------------------------------------------------------------
_FE:	;@ INC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opINC 7
;@----------------------------------------------------------------------------
_FF:	;@ ISB $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opISB 7
;@----------------------------------------------------------------------------


;@----------------------------------------------------------------------------
memRead8ABS:				;@ Mem read ($0000-$FFFF)
;@----------------------------------------------------------------------------
	doAbs
;@----------------------------------------------------------------------------
memRead8:					;@ Mem read ($0000-$FFFF)
;@----------------------------------------------------------------------------
	add r0,m6502optbl,#m6502ReadTbl
	and r1,addy,#0xE000
	ldr pc,[r0,r1,lsr#11]		;@ In: addy,r0=val(bits 8-31=?)
;@----------------------------------------------------------------------------
memRead8IIX:				;@ Mem read ($0000-$FFFF)
;@----------------------------------------------------------------------------
	doIIX
	add r0,m6502optbl,#m6502ReadTbl
	and r1,addy,#0xE000
	ldr pc,[r0,r1,lsr#11]		;@ In: addy,r0=val(bits 8-31=?)
;@----------------------------------------------------------------------------
memRead8IIY:				;@ Mem read ($0000-$FFFF)
;@----------------------------------------------------------------------------
	doIIY
	add r0,m6502optbl,#m6502ReadTbl
	and r1,addy,#0xE000
	ldr pc,[r0,r1,lsr#11]		;@ In: addy,r0=val(bits 8-31=?)
;@----------------------------------------------------------------------------
memRead8ZPI:				;@ Mem read ($0000-$FFFF)
;@----------------------------------------------------------------------------
	doZPI
	add r0,m6502optbl,#m6502ReadTbl
	and r1,addy,#0xE000
	ldr pc,[r0,r1,lsr#11]		;@ In: addy,r0=val(bits 8-31=?)
;@----------------------------------------------------------------------------
memRead8AIY:				;@ Mem read ($0000-$FFFF)
;@----------------------------------------------------------------------------
	doAIY
	add r0,m6502optbl,#m6502ReadTbl
	and r1,addy,#0xE000
	ldr pc,[r0,r1,lsr#11]		;@ In: addy,r0=val(bits 8-31=?)
;@----------------------------------------------------------------------------
memRead8AIX:				;@ Mem read ($0000-$FFFF)
;@----------------------------------------------------------------------------
	doAIX
	add r0,m6502optbl,#m6502ReadTbl
	and r1,addy,#0xE000
	ldr pc,[r0,r1,lsr#11]		;@ In: addy,r0=val(bits 8-31=?)
;@----------------------------------------------------------------------------
;@memWrite8Abs:				;@ Mem write ($0000-$FFFF)
;@----------------------------------------------------------------------------
;@	doAbs
;@----------------------------------------------------------------------------
memWrite8:					;@ Mem write ($0000-$FFFF)
;@----------------------------------------------------------------------------
	add r2,m6502optbl,#m6502WriteTbl
	and r1,addy,#0xE000
	ldr pc,[r2,r1,lsr#11]		;@ In: addy,r0=val(bits 8-31=?)
;@----------------------------------------------------------------------------
reTranslate6502PCToOffset:		;@ In = m6502pc+bank, out = r0 bank offset
;@----------------------------------------------------------------------------
	loadLastBank r0
	sub m6502pc,m6502pc,r0
;@----------------------------------------------------------------------------
translate6502PCToOffset:	;@ In = m6502pc, out = r0 bank offset
;@----------------------------------------------------------------------------
	add r1,m6502optbl,#m6502MemTbl
	and r0,m6502pc,#0xE000
	ldr r0,[r1,r0,lsr#11]
	storeLastBank r0
	add m6502pc,m6502pc,r0
	bx lr						;@ Out: m6502pc.

;@----------------------------------------------------------------------------
flush:						;@ Update m6502pc & lastbank
;@----------------------------------------------------------------------------
	reEncodePC

	ldmfd sp!,{r3-r8,lr}
	bx lr

;@----------------------------------------------------------------------------
doBRK:						;@ Moved here for alignment
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA debug!
	add m6502pc,m6502pc,#2
	loadLastBank r0
	sub r0,m6502pc,r0
	push16						;@ Save PC

	encodeP (B+R)				;@ Save P
	ldr r12,interruptVectors	;@=IRQ_VECTOR
	b irqContinue
;@----------------------------------------------------------------------------
outOfCycles:
	sub m6502pc,m6502pc,#1
	ldr pc,[m6502optbl,#m6502NextTimeout]
;@----------------------------------------------------------------------------
m6502SetNMIPin:				;@ NMI is edge triggered
;@----------------------------------------------------------------------------
	cmp r0,#0
	movne r0,#1
	ldrb r1,[m6502optbl,#m6502NMIPin]
	strb r0,[m6502optbl,#m6502NMIPin]
	bics r1,r0,r1
	ldrbne r0,[m6502optbl,#m6502IrqPending]
	orrne r0,r0,#1
	strbne r0,[m6502optbl,#m6502IrqPending]
	bx lr
;@----------------------------------------------------------------------------
m6502SetIRQPin:
;@----------------------------------------------------------------------------
	cmp r0,#0
	ldrb r0,[m6502optbl,#m6502IrqPending]
	biceq r0,r0,#0x04
	orrne r0,r0,#0x04
	strb r0,[m6502optbl,#m6502IrqPending]
	bx lr
;@----------------------------------------------------------------------------
m6502RestoreAndRunXCycles:	;@ r0 = number of cycles to run
;@----------------------------------------------------------------------------
	add r1,m6502optbl,#m6502Regs
	ldmia r1,{m6502nz-m6502pc,m6502zpage}	;@ Restore M6502 state
;@----------------------------------------------------------------------------
m6502RunXCycles:			;@ r0 = number of cycles to run
;@----------------------------------------------------------------------------
	add cycles,cycles,r0,lsl#CYC_SHIFT
;@----------------------------------------------------------------------------
m6502CheckIrqs:
	ldrb r1,[m6502optbl,#m6502IrqPending]
	and r0,cycles,#CYC_I		;@ CYC_I = 4
	bics r0,r1,r0
	beq m6502Go
;@ - - - - - - - - - - - - - - - - - - -
	bic r1,r1,#0x01				;@ Clear NMI
	strb r1,[m6502optbl,#m6502IrqPending]
//whichIrq:
#ifdef ARM9
	clz r0,r0
	rsb r0,r0,#0x1f
#else
	tst r0,#1					;@ NMI?
	movne r0,#0
	bne doNMI
	tst r0,#4					;@ IRQ
	movne r0,#2
doNMI:
#endif // ARM9
	adr r2,interruptVectors
	ldr r12,[r2,r0,lsl#2]
;@----------------------------------------------------------
irq6502:					;@ Needs irq vector in r12
;@----------------------------------------------------------
	loadLastBank r0
	sub r0,m6502pc,r0
	push16						;@ Save PC

	encodeP (R)					;@ Save P
irqContinue:
	push8 r0

	orr cycles,cycles,#CYC_I	;@ Disable IRQ
;@	bic cycles,cycles,#CYC_D	;@ and decimal mode?

	ldr r0,[m6502optbl,#m6502MemTbl+7*4]
	ldrh m6502pc,[r0,r12]
	encodePC					;@ Get IRQ vector

	fetch 7

;@----------------------------------------------------------------------------
cliFix:					;@ Cli should be delayed by 1 instruction.
;@----------------------------------------------------------------------------
	ldr r0,[m6502optbl,#m6502OldCycles]
	ldr r1,[m6502optbl,#m6502NextTimeout_]
	str r1,[m6502optbl,#m6502NextTimeout]
	mov r0,r0,lsr#CYC_SHIFT		;@ Don't add any cpu bits.

	b m6502RunXCycles
;@----------------------------------------------------------------------------
interruptVectors:
;@----------------------------------------------------------------------------
	.long NMI_VECTOR		;@ NMI IRQ vector
	.long RES_VECTOR		;@ Reset vector
	.long IRQ_VECTOR		;@ Normal IRQ vector


;@----------------------------------------------------------------------------
opADC_Dec:
;@----------------------------------------------------------------------------
	opADCD 5
;@----------------------------------------------------------------------------
opSBC_Dec:
;@----------------------------------------------------------------------------
	opSBCD 5

;@----------------------------------------------------------------------------
#ifdef GBA
	.section .ewram, "ax"		;@ For the GBA
#else
	.section .text				;@ For everything else
#endif
;@----------------------------------------------------------------------------
_xx:	;@ ???					Invalid opcode
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA debugg!
/*
 	Do some debugging!
 */
	fetch 2

;@----------------------------------------------------------------------------
m6502Reset:				;@ Called by cpuReset (r0-r9 are free to use)
	.type m6502Reset STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{lr}

;@---cpu reset
	mov m6502a,#0
	mov m6502x,#0
	mov m6502y,#0
	mov m6502nz,#0
	ldr m6502sp,=0xFF000001
	ldr m6502zpage,[m6502optbl,#m6502MemTbl]
	mov cycles,#CYC_I			;@ V=0, D=0, C=0, I=1 disable IRQ.

	str m6502a,[m6502optbl,#m6502IrqPending]	;@ Irq pending reset

	ldr r0,[m6502optbl,#m6502MemTbl+7*4]
	ldr r1,=RES_VECTOR
	ldrh m6502pc,[r0,r1]
	encodePC					;@ Get RESET vector

	add r0,m6502optbl,#m6502Regs
	stmia r0,{m6502nz-m6502pc,m6502zpage}
	ldmfd sp!,{pc}

;@----------------------------------------------------------------------------
m6502SaveState:			;@ In r0=destination, r1=m6502optbl. Out r0=state size.
	.type   m6502SaveState STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{r4,m6502optbl,lr}

	sub r4,r0,#m6502Regs
	mov m6502optbl,r1

	add r1,m6502optbl,#m6502Regs
	mov r2,#m6502StateEnd-m6502StateStart	;@ Right now 0x24
	bl memcpy

	;@ Convert copied PC to not offseted.
	ldr r0,[r4,#m6502RegPc]					;@ Offsetted m6502pc
	loadLastBank r2
	sub r0,r0,r2
	str r0,[r4,#m6502RegPc]					;@ Normal m6502pc

	ldmfd sp!,{r4,m6502optbl,lr}
	mov r0,#m6502StateEnd-m6502StateStart	;@ Right now 0x24
	bx lr
;@----------------------------------------------------------------------------
m6502LoadState:			;@ In r0=m6809optbl, r1=source. Out r0=state size.
	.type   m6502LoadState STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{m6502pc,m6502optbl,lr}

	mov m6502optbl,r0
	add r0,m6502optbl,#m6502Regs
	mov r2,#m6502StateEnd-m6502StateStart	;@ Right now 0x24
	bl memcpy

	ldr m6502pc,[m6502optbl,#m6502RegPc]	;@ Normal m6502pc
	encodePC
	str m6502pc,[m6502optbl,#m6502RegPc]	;@ Rewrite offseted m6502pc

	ldmfd sp!,{m6502pc,m6502optbl,lr}
;@----------------------------------------------------------------------------
m6502GetStateSize:		;@ Out r0=state size.
	.type   m6502GetStateSize STT_FUNC
;@----------------------------------------------------------------------------
	mov r0,#m6502StateEnd-m6502StateStart	;@ Right now 0x24
	bx lr
;@----------------------------------------------------------------------------
#ifdef NDS
	.section .dtcm, "ax", %progbits			;@ For the NDS
#elif GBA
	.section .iwram, "ax", %progbits		;@ For the GBA
#else
	.section .text
#endif
;@----------------------------------------------------------------------------
m6502OpTable:
	.long _00,_01,_02,_03,_04,_05,_06,_07,_08,_09,_0A,_0B,_0C,_0D,_0E,_0F
	.long _10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_1A,_1B,_1C,_1D,_1E,_1F
	.long _20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_2A,_2B,_2C,_2D,_2E,_2F
	.long _30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_3A,_3B,_3C,_3D,_3E,_3F
	.long _40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_4A,_4B,_4C,_4D,_4E,_4F
	.long _50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_5A,_5B,_5C,_5D,_5E,_5F
	.long _60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_6A,_6B,_6C,_6D,_6E,_6F
	.long _70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_7A,_7B,_7C,_7D,_7E,_7F
	.long _80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_8A,_8B,_8C,_8D,_8E,_8F
	.long _90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_9A,_9B,_9C,_9D,_9E,_9F
	.long _A0,_A1,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_AA,_AB,_AC,_AD,_AE,_AF
	.long _B0,_B1,_B2,_B3,_B4,_B5,_B6,_B7,_B8,_B9,_BA,_BB,_BC,_BD,_BE,_BF
	.long _C0,_C1,_C2,_C3,_C4,_C5,_C6,_C7,_C8,_C9,_CA,_CB,_CC,_CD,_CE,_CF
	.long _D0,_D1,_D2,_D3,_D4,_D5,_D6,_D7,_D8,_D9,_DA,_DB,_DC,_DD,_DE,_DF
	.long _E0,_E1,_E2,_E3,_E4,_E5,_E6,_E7,_E8,_E9,_EA,_EB,_EC,_ED,_EE,_EF
	.long _F0,_F1,_F2,_F3,_F4,_F5,_F6,_F7,_F8,_F9,_FA,_FB,_FC,_FD,_FE,_FF

	.space 8*4	;@ MemTbl
	.space 8*4	;@ ReadTbl
	.space 8*4	;@ WriteTbl
m6502StateStart:
	;@ Group these together for save/loadstate
	.space 8*4	;@ cpuRegs (nz,a,x,y,sp,cycles,pc,zp)
	.byte 0 	;@ m6502IrqPending
	.byte 0 	;@ m6502NMIPin
	.space 2	;@ padding
m6502StateEnd:
	.long 0		;@ LastBank:		Last memmap added to PC (used to calculate current PC)
	.long 0 	;@ OldCycles:		Backup of cycles
	.long 0 	;@ NextTimeout_:	Backup of nexttimeout
	.long 0		;@ NextTimeout:		Jump here when cycles runs out

;@----------------------------------------------------------------------------
	.end
#endif // #ifdef __arm__
